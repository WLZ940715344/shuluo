1.git指令
1）git仓库的状态与区域
  3个区域：
    工作区：工作的区域，我们用于写代码的空间
    暂存区
    master
    当前HEAD指向的分支：
  4个状态
    1.unmodifled:工作区以及暂存中没有任何需要提交的修改，工作区很干净
    2.untracked:仓库中有新建的文件但是还没有提交过，没有能纳入到git的控制之中
    3.modifled：有文件被修改但还没有提交到暂存区
    4.stage：工作区的修改已经被提交到了暂存区，即已经执行过git add命令，正在等待被提交到master
2）撤销修改
  1.撤销工作区修改
    git checkout -- 文件名
    文件修改以后，没有被执行git add指令
  2.撤销暂存区修改
    文件已经被修改，并且已经执行过add，但是还没执行过git commit
    git commit
    分两步：
      撤销暂存操作 git reset HEAD 文件名
      撤销工作区的修改 git checkout -- 文件名
  3.撤销master修改
    无法撤销，只能通过版本回退的方式
    撤销前，先查看提交的id，确定需要回退到哪个版本
      git resrt --hard 提交的id
    
  3）查看提交信息/存盘点
    git log
    如果查询的提交过多，无法一次全部显示，可以按住shift+q 提前结束
    git log --pretty=oneline
  4)关于存盘点（HEAD）
    实现版本的控制
      git中把每一次的提交都会窜成一条时间线，这个时间线就是一条分支，默认只有一条分支master，也称之为主分支
      而HEAD指向的就是当前分支
  5）分支
    1.创建分支
      git branch 分支名
      将当前所在的分支复制一条新的分支
    2.查看当前所有分支
      git branch
    3.切换分支
      git checkout 分支名
      在分支上的操作，不会影响其他分支
    4.合并分支
      git merge分支名称
      将制定名称的分支的内容合并到当前分支
      eg:在master分支下使用 git merge v1
          将v1的分支内容合并到master中去，
          master分支的内容发生改变，v1分支的内容不会改变
    5.删除分支
      git branch -d 分支名称
      删除置顶分支（不能删除当前所在分支）
      git branch -D 分支名称
        强制删除未合并的分支
    
    练习：
    1.删除test文件重新创建
    2.初始化仓库，新建1.TXT，将1.txt的内容修改成abc，提交
    3。创建分支v1，查看所有分支，切换到v1
    4.将1.txt内容修改为123，提交
    5.切换到master分支，查看1.txt的内容是否发生改变
    6.将v1分支合并到master分支，分别查看master与v1分支中的1.txt内容
    7.创建v2,在v2分支新建2.txt，提交
    8.切换到master分支，查看是否有2.txt
    9。删除v1
  
  2.GitHub的使用
    http://github.com
    远程仓库
    1）注册登录
    2）新建远程仓库
    3）将本地仓库与远程仓库相关联
    shen111123_03\j